{
  "version": 3,
  "sources": [
    "../../AppData/Roaming/npm/node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "src\\components\\deferred-image.js",
    "src\\components\\handler.js",
    "src\\components\\watcher.js",
    "src\\config\\options.js",
    "src\\index.js",
    "src\\utils\\dom-traversal.js",
    "src\\utils\\extend.js",
    "src\\utils\\flatten.js",
    "src\\utils\\in-view.js",
    "src\\utils\\is-array.js",
    "src\\utils\\is-function.js",
    "src\\utils\\is-image.js",
    "src\\utils\\is-node-list.js",
    "src\\utils\\style-manipulation.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "import isArray from '../utils/is-array';\r\n\r\n/**\r\n * @class\r\n * Handles loading the image and firing callbacks if the \r\n * image has loaded or has failed. \r\n */\r\nexport default class DeferredImage {\r\n    \r\n    /**\r\n     * @function\r\n     * Loops through array / link of image sources and creates\r\n     * deferred images, firing the callback when all images\r\n     * have finished loading or have errored out.\r\n     * @param {String|Array<String>} - An array of image srcs.\r\n     * @param {Function} - Callback function for when the image has loaded.\r\n     * @returns {Promise|null} - Promise which resolves when all the images\r\n     * have been loaded.\r\n     */\r\n    static wait( src, loaded ) {\r\n        \r\n        if ( !isArray( src ) ) {\r\n            \r\n            src = [ src ];\r\n            \r\n        }\r\n            \r\n        let noImages = src.length;\r\n        \r\n        const tempLoaded = () => {\r\n                      \r\n            noImages--;\r\n            \r\n            if ( noImages === 0 ) {\r\n                \r\n                loaded();\r\n            \r\n            }\r\n                \r\n        };\r\n        \r\n        for ( let i = 0; i < src.length; i++ ) {\r\n            \r\n            new DeferredImage( {\r\n                src: src[i],\r\n                loaded: tempLoaded.bind( this ),\r\n                failed: tempLoaded.bind( this )\r\n            } );    \r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @function\r\n     * Initialising the configuration for the deferred image.\r\n     * @param {Object} - The image src as well as callback methods.\r\n     */\r\n    constructor( { src, loaded, failed } ) {\r\n        \r\n        this.src = src;\r\n        this.pseudo = new Image();\r\n        this._loaded = loaded || function() {};\r\n        this._failed = failed || function() {};\r\n        \r\n        this.init();\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @function\r\n     * Load the image and fire when the image has loaded or\r\n     * returned an error.\r\n     */\r\n    init() {\r\n        \r\n        let self = this;\r\n        \r\n        self.pseudo.src = this.src;\r\n        \r\n        self.pseudo.addEventListener( 'load', this._loaded );\r\n        self.pseudo.addEventListener( 'error', this._failed );\r\n        \r\n    }\r\n    \r\n}",
    "import Watcher from './watcher';\r\nimport DeferredImage from './deferred-image';\r\n\r\nimport { syncOptions } from '../config/options';\r\nimport isArray from '../utils/is-array';\r\nimport isFunction from '../utils/is-function';\r\nimport isNodeList from '../utils/is-node-list';\r\nimport extend from '../utils/extend';\r\nimport flatten from '../utils/flatten';\r\n\r\n/**\r\n * @class\r\n * Responsible for initialising the watchers, passing\r\n * through the configuration and ensuring user defined\r\n * callbacks are executed when necessary.\r\n */\r\nexport default class Handler {\r\n    \r\n    /**\r\n     * @function\r\n     * Initialising the configuration for the handler.\r\n     * @param {Object} - amalgamation of default and user defined options.\r\n     */\r\n    constructor( { \r\n        els,\r\n        error,\r\n        placehold,\r\n        forcePlacehold,\r\n        imageLoaded,\r\n        imageLoading,\r\n        sync,\r\n        inView,\r\n        background,\r\n        success,\r\n        fail,\r\n        progress,\r\n        loaded\r\n    } ) {\r\n        \r\n        this.els = this._getElements( els ); \r\n        \r\n        this.watchers = [];\r\n        \r\n        // Image src for placehold or if error occurs.\r\n        this.error = error;\r\n        this.placehold = placehold;\r\n        \r\n        this.inView = inView;\r\n        this.background = background;\r\n        this.forcePlacehold = forcePlacehold;\r\n        \r\n        // Classes to add to the image / holder.\r\n        this.imageLoaded = imageLoaded;\r\n        this.imageLoading = imageLoading;\r\n        \r\n        // Callback functions.\r\n        this.fail = fail || function() { };\r\n        this.loaded = loaded || function() { };\r\n        this.success = success || function() { };\r\n        this.progress = progress || function() { };\r\n        \r\n        if ( typeof sync === 'object' ) {\r\n            \r\n            this.sync = extend( syncOptions, sync );\r\n         \r\n        }\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @function\r\n     * Ensures different types of elements are outputted as an array.\r\n     * @param {Array|Function|Object} els - Elements that are either holders or elements.\r\n     * @returns {Array} - An array of images / holders.\r\n     */\r\n    _getElements( els ) {\r\n        \r\n        if ( isArray( els ) ) {\r\n            \r\n            return els;\r\n            \r\n        } else if ( isFunction( els ) ) {\r\n            \r\n            return els.call( this );\r\n            \r\n        } else if ( isNodeList( els ) ) {\r\n            \r\n            return Array.prototype.slice.call( els, 0 );\r\n            \r\n        } else {\r\n            \r\n            return [ els ];\r\n            \r\n        }\r\n            \r\n    }\r\n    \r\n    /**\r\n     * @function\r\n     * Create the watchers with default configuration,\r\n     * note this can be overidden by \"data-o\" attributes on\r\n     * the watcher's element.\r\n     * @returns {Promise|Array<Object>} \r\n     */\r\n    init() {\r\n        \r\n        this._attachWatchers();\r\n                \r\n        /**\r\n         * Ensure that the placehold and error images are \r\n         * loaded before loading the other images.\r\n         */\r\n        if ( this.forcePlacehold && ( this.placehold || this.error ) ) {\r\n            \r\n            return DeferredImage.wait( [ this.error, this.placehold ], this._initWatchers.bind( this ) );\r\n            \r\n        }\r\n        \r\n        if ( this.sync ) {\r\n            \r\n            return isArray( this.sync.matrix ) || isFunction( this.sync.matrix ) ? this._initMatrix() : this._syncWatchers( this.watchers );\r\n            \r\n        }\r\n        \r\n        return this._initWatchers();\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @function\r\n     * Create the watchers with settings, note this \r\n     * can be overidden by \"data-o\" attributes on\r\n     * the watcher's element.\r\n     */\r\n    _attachWatchers() {\r\n        \r\n        let self = this;\r\n        \r\n        for ( let i = 0; i < self.els.length; i++ ) {\r\n           \r\n            let watcher = new Watcher( {\r\n                el: self.els[ i ],\r\n                error: self.error,\r\n                placehold: self.placehold,\r\n                imageLoaded: self.imageLoaded,\r\n                imageLoading: self.imageLoading,\r\n                background: self.background,\r\n                loaded: self._imageLoaded.bind( self ),\r\n                failed: self._imageFailed.bind( self ),\r\n                success: self._imagesSuccess.bind( self )\r\n            } );\r\n               \r\n            self.watchers.push( watcher );\r\n           \r\n        }\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @function \r\n     * Initialise the watchers to show the placeholder and\r\n     * load the images. \r\n     * @returns {Array<Object>} An array of watchers.\r\n     */\r\n    _initWatchers() {\r\n        \r\n        return this.watchers.map( ( watcher ) => {\r\n            \r\n            return this.inView ? watcher.watchView() : watcher.init();\r\n            \r\n        } );\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @function \r\n     * Initialise the watchers matrix, order the synchronous execution\r\n     * of watchers according to the matrix.\r\n     * @returns { void } - Execute the watchers synchronously\r\n     */\r\n    _initMatrix() {\r\n        \r\n        if ( isFunction( this.sync.matrix ) ) {\r\n            \r\n            this.sync.matrix = this.sync.matrix( this.watchers );\r\n            \r\n        }\r\n        \r\n        if ( this.watchers.length !== this.sync.matrix.length ) {\r\n            \r\n            throw new Error( 'The matrix must contain the same number of items as the number of images' );\r\n            \r\n        }\r\n        \r\n        let self = this;\r\n        let ordered = {};\r\n        let matrix = [];\r\n        \r\n        /**\r\n         * Iterate through the matrix and pair\r\n         * the watcher with its specified position.\r\n         */\r\n        self.sync.matrix.forEach( ( value, index ) => {\r\n            \r\n            if ( isArray( ordered[ value ] ) ) {\r\n                \r\n                ordered[ value ].push( self.watchers[ index ] );\r\n                \r\n            } else {\r\n                \r\n                ordered[ value ] = [ self.watchers[ index ] ];\r\n                \r\n            }\r\n            \r\n        } );\r\n        \r\n        /**\r\n         * Sort the keys in ascending order and \r\n         * move the ordered object's pairs to\r\n         * the matrix array.\r\n         */\r\n        Object\r\n            .keys( ordered )\r\n            .sort( ( a, b ) => a - b )\r\n            .forEach( ( value, index ) => { \r\n                matrix[ index ] = ordered[ value ];\r\n            } );\r\n        \r\n        return this._syncWatchers( matrix );\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @function \r\n     * Initialise the watchers synchronously.\r\n     * @params {Array} watchers - List of watchers to synchronously load\r\n     * @returns {void} - Queue image loading execution\r\n     */\r\n    _syncWatchers( watchers ) {\r\n        \r\n        let self = this;\r\n        let { delay, perLoad } = self.sync;\r\n        let index = 0;\r\n        let maxIndex = Math.ceil( watchers.length / perLoad );\r\n        \r\n        const executeQueue = () => {\r\n            \r\n            index++;\r\n            \r\n            if ( index <= maxIndex ) {\r\n                \r\n                let start = perLoad * ( index - 1 );\r\n                let end = perLoad * index;\r\n                let flattened = flatten( watchers.slice( start, end ) );\r\n                \r\n                Watcher.queue( flattened, setTimeout.bind( null, executeQueue, delay ) );\r\n                       \r\n            }\r\n            \r\n        };\r\n        \r\n        self.watchers.map( ( watcher ) => watcher._setup() );\r\n        \r\n        return executeQueue();\r\n        \r\n    }\r\n        \r\n    /**\r\n     * @function \r\n     * Called when an image has been loaded, computes the\r\n     * progress of the watchers as well as firing other\r\n     * callbacks.\r\n     * @param {Object::Watcher} watcher - The object that listens to the image status.\r\n     */\r\n    _imageLoaded( watcher ) {\r\n        \r\n        let self = this;\r\n        let toLoad = self.watchers.length;\r\n        let haveLoaded = self.watchers.filter( ( watcher ) => watcher.hasLoaded ).length;\r\n        \r\n        self.loaded( watcher );\r\n        \r\n        self.progress( watcher, { \r\n            total: toLoad, \r\n            loaded: haveLoaded, \r\n            percent: Math.round( ( haveLoaded / toLoad ) * 100 ) \r\n        } );\r\n        \r\n        if ( toLoad === haveLoaded ) {\r\n            \r\n            self._imagesSuccess();\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @function\r\n     * Called when an image has failed to load, and fires\r\n     * a callback.\r\n     * @param {Object::Watcher} watcher - The object that listens to the image status.\r\n     */\r\n    _imageFailed( watcher ) {\r\n        \r\n        let self = this;\r\n        \r\n        self.fail ( watcher );\r\n        \r\n        self._watchUpdates();\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @function\r\n     * Called when all of the images have been loaded, and fires\r\n     * a callback.\r\n     * @param {Object::Watcher} watcher - The object that listens to the image status.\r\n     */\r\n    _imagesSuccess() {\r\n        \r\n        let self = this;\r\n        \r\n        self.success( self.watchers );\r\n        \r\n        self._watchUpdates();\r\n        \r\n    }\r\n    \r\n    _watchUpdates() {\r\n        \r\n        let self = this;\r\n        \r\n        window.addEventListener( 'resize', function() {\r\n            \r\n            self.watchers\r\n                .filter( ( watcher ) => watcher.hasBackground && watcher.hasChanged() )\r\n                .forEach( ( watcher ) => watcher.updateBackground() );\r\n            \r\n        } );\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @function\r\n     * Manually trigger updating images whose source that has changed, intended\r\n     * for use if the website has altered the src of an image.\r\n     */\r\n    update() {\r\n        \r\n        this.watchers\r\n            .filter( ( watcher ) => watcher.toLoad !== watcher.img.src && !watcher.hasBackground )\r\n            .forEach( ( watcher ) => watcher.init() );\r\n        \r\n    }\r\n    \r\n}",
    "import DeferredImage from './deferred-image';\r\n\r\nimport isArray from '../utils/is-array';\r\nimport isImage from '../utils/is-image';\r\nimport inView from '../utils/in-view';\r\nimport { findClosestImage } from '../utils/dom-traversal';\r\nimport { removeClass, addClass, getBackgroundImage, setBackgroundImage } from '../utils/style-manipulation';\r\n\r\n/**\r\n * @class\r\n * Watches the status of the image load, manipulating the\r\n * associated element and firing callbacks depending on the\r\n * image's status.\r\n */\r\nexport default class Watcher {\r\n    \r\n    /**\r\n     * @function\r\n     * Initialise the array of watchers and when finished,\r\n     * execute the callback. \r\n     * @param {Array|Object} watchers - A watcher or an array of watchers.\r\n     * @param {Function} loaded - The callback to execute when finished. \r\n     */\r\n    static queue( watchers, loaded ) {\r\n        \r\n        if ( !isArray( watchers ) ) {\r\n            \r\n            watchers = [ watchers ];\r\n            \r\n        }\r\n        \r\n        let noWatchers = watchers.length;\r\n\r\n        const tempLoaded = () => {\r\n                      \r\n            noWatchers--;\r\n            \r\n            if ( noWatchers === 0 ) {\r\n                \r\n                loaded();\r\n            \r\n            }\r\n                \r\n        };\r\n        \r\n        for ( let i = 0; i < watchers.length; i++ ) {\r\n            \r\n            let currentWatcher = watchers[ i ];\r\n            \r\n            currentWatcher._any = tempLoaded.bind( this );\r\n            \r\n            // Watcher should already be setup before initialisation.\r\n            currentWatcher.init( true );\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * Initialising the configuration for the watcher.\r\n     * @param {Object} - Defined options.\r\n     */\r\n    constructor( {\r\n        el,\r\n        error,\r\n        placehold,\r\n        loaded,\r\n        failed,\r\n        imageLoaded,\r\n        imageLoading,\r\n        background\r\n    } ) {\r\n        \r\n        this.el = el;\r\n        this.error = this.el.getAttribute( 'data-o-error' ) || error;\r\n        this.background = this.el.getAttribute('data-o-background') || background;\r\n        this.placehold = this.el.getAttribute( 'data-o-placehold' ) || placehold;\r\n        this.imageLoaded = this.el.getAttribute( 'data-o-loaded' ) || imageLoaded;\r\n        this.imageLoading = this.el.getAttribute( 'data-o-loading' ) || imageLoading;\r\n        \r\n        this.loaded = loaded;\r\n        this.failed = failed;\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @function\r\n     * Indicate that the image is loading, swap out the image's\r\n     * src for the specified placeholder src and defer loading of \r\n     * the image to an Image object.\r\n     * @param {Boolean} reinit - Whether to setup the watcher again.\r\n     * @returns {Object} - The watcher.\r\n     */\r\n    init( reinit ) {\r\n        \r\n        if ( !reinit ) {\r\n            \r\n            this._setup();\r\n        \r\n        }\r\n            \r\n        addClass( this.el, this.imageLoading );\r\n        \r\n        this.pseudo = new DeferredImage( {\r\n            src: this.toLoad,\r\n            loaded: this._loaded.bind( this ),\r\n            failed: this._error.bind( this )\r\n        } );\r\n        \r\n        return this;\r\n        \r\n    }\r\n    \r\n    _setup() {\r\n        \r\n        this.pseudo = {};\r\n        this.inView = false;\r\n        this.hasLoaded = false;\r\n        this.hasBackground = false;\r\n        \r\n        this._getElement( this.el );\r\n        this.toLoad = this._getImage();\r\n        this._setImage( this.placehold );\r\n        \r\n        removeClass( this.el, this.imageLoaded, this.imageLoading );\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @function\r\n     * Check whether the element is visible within the view,\r\n     * also, reevaluate whether the element is visible when\r\n     * window is scrolled or resized.\r\n     * @returns {Object|Promise} - The watcher or a promise.\r\n     */\r\n    watchView() {\r\n        \r\n        this._setup();\r\n        \r\n        window.addEventListener( 'scroll', this._onViewChange.bind( this ) );\r\n        window.addEventListener( 'resize', this._onViewChange.bind( this ) );\r\n        \r\n        return this._onViewChange();\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @function\r\n     * Check whether the image loaded has changed\r\n     */\r\n    hasChanged() {\r\n        \r\n        return this.toLoad !== getBackgroundImage( this.img );\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @function\r\n     * Check whether the element is visible within the view,\r\n     * and if so, initialise the watcher.\r\n     * @returns {Object|Promise} - The watcher or a promise.\r\n     */\r\n    _onViewChange() {\r\n        \r\n        if ( !inView( this.el ) || this.inView ) {\r\n            \r\n            return;\r\n            \r\n        }\r\n        \r\n        // No need for listeners when image has loaded.\r\n        window.removeEventListener( 'scroll', this._onViewChange.bind( this ) );\r\n        window.removeEventListener( 'resize', this._onViewChange.bind( this ) );\r\n        \r\n        this.init( true );\r\n        \r\n        this.inView = true;\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @function\r\n     * Determine whether the element contains an image or is just the\r\n     * image itself and set the element's image to either the element\r\n     * or the first child image.\r\n     * @param {Object} el - The element\r\n     */\r\n    _getElement( el ) {\r\n        \r\n        this.img = ( isImage( el ) || this.background ) ? el : findClosestImage( el );\r\nr\n    }\r\n    \r\n    /**\r\n     * @function\r\n     * Set the image src of the element's image based on whether\r\n     * it's a background image or an image element.\r\n     * @params {String} src - The image src\r\n     */\r\n    _setImage( src ) {\r\n        \r\n        if ( this.background ) {\r\n            \r\n            setBackgroundImage( this.img, src );\r\n            \r\n        } else {\r\n            \r\n            this.img.src = src; \r\n            \r\n        }\r\n        \r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * Get the image src of the element's image based on whether\r\n     * it's a background image or an image element.\r\n     * @returns {String} - The image src\r\n     */\r\n    _getImage() {\r\n        \r\n        return this.background ? getBackgroundImage( this.img ) : this.img.getAttribute( 'data-o-src' );\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @function\r\n     * The image has loaded succesfully, swap out the image's \r\n     * placeholder src for the loaded src. Also, fire associated\r\n     * callback. \r\n     */\r\n    _loaded() {\r\n        \r\n        removeClass( this.el, this.imageLoading );\r\n        addClass( this.el, this.imageLoaded );\r\n        \r\n        this._setImage( this.toLoad );\r\n        \r\n        this.hasLoaded = true;\r\n        \r\n        this.loaded( this );\r\n        \r\n        this._any( this );\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @function\r\n     * The image has loaded unsuccesfully, swap out the image's \r\n     * placeholder src for the error src. Also, fire associated\r\n     * callback. \r\n     */\r\n    _error() {\r\n        \r\n        removeClass( this.el, this.imageLoading );\r\n        \r\n        this._setImage( this.error );\r\n        \r\n        this.hasLoaded = true;\r\n        \r\n        this.failed( this );\r\n            \r\n        this._any( this );\r\n        \r\n    }\r\n    \r\n    /**\r\n     * TODO: Expand upon functionality, currently just for\r\n     * the ^ static queue function.\r\n     * @function\r\n     * Executed whenever an image has been loaded or an \r\n     * error has been found.\r\n     * @returns { Object::Watcher } Return this instance.\r\n     */\r\n    _any() {\r\n        \r\n        return this;\r\n        \r\n    }\r\n    \r\n}",
    "/**\r\n * @object\r\n * Default options for the handler.\r\n */\r\nlet defaultOptions = {\r\n    els: document.getElementsByTagName('img'),\r\n    \r\n    error: '',\r\n    placehold: '',\r\n    \r\n    forcePlacehold: false,\r\n    inView: false,\r\n    background: false,\r\n    sync: false,\r\n    \r\n    imageLoaded: 'o-image-loaded',\r\n    imageLoading: 'o-image-loading'\r\n};\r\n\r\n/**\r\n * @object\r\n * Default options for synchronous image \r\n * loading.\r\n */\r\nlet syncOptions = {\r\n    perLoad: 1,\r\n    delay: 0\r\n};\r\n\r\nexport { defaultOptions, syncOptions };",
    "import { defaultOptions } from './config/options';\r\nimport Handler from './components/handler';\r\nimport DeferredImage from './components/deferred-image';\r\nimport extend from './utils/extend';\r\n\r\n/**\r\n * @function\r\n * Load Otho and parse through the user's options.\r\n * @param {Object} userOptions - The user defined options  \r\n * @returns {Array<Watcher>|Promise} - List of watchers and a promise containing watchers\r\n */\r\nexport function load( userOptions ) {\r\n        \r\n    let options = extend( defaultOptions, userOptions );\r\n\r\n    return new Handler( options ).init();\r\n        \r\n}\r\n\r\n/**\r\n * @function\r\n * Preload the specified images.\r\n * @param {Object|Array} images - The images to preload  \r\n * @param {Function} cb - The callback to execute when all\r\n * the specified images are preloaded.\r\n */\r\nexport function preload( images, cb ) {\r\n    \r\n    return DeferredImage.wait( images, cb );\r\n    \r\n}",
    "import isImage from './is-image';\r\n\r\n/**\r\n * @function\r\n * Find all descendent images of the element\r\n * @param el - The element to check.\r\n * @returns {Array} - An array of descendent images\r\n */\r\nfunction findChildrenImages( el ) {\r\n    \r\n    let _images = [];\r\n  \r\n    ( function _find( el ) {\r\n        \r\n        if ( isImage( el ) ) {\r\n            \r\n            return _images.push( el );\r\n        \r\n        }\r\n           \r\n        return Array.prototype.slice.apply( el.childNodes ).forEach( _find );\r\n        \r\n    } )( el );\r\n    \r\n    return _images;\r\n    \r\n}\r\n\r\n/**\r\n * @function\r\n * Find all descendent images of the element and \r\n * return the first image found.\r\n * @param el - The element to check.\r\n * @returns {Object|null} - The image or, if none \r\n * found, null.\r\n */\r\nfunction findClosestImage( el ) {\r\n    \r\n    let _images = findChildrenImages( el );\r\n    \r\n    return _images.length ? _images[0] : null;\r\n    \r\n}\r\n\r\nexport { findChildrenImages, findClosestImage };",
    "/**\r\n * @function\r\n * See https://gomakethings.com/vanilla-javascript-version-of-jquery-extend/ for full description.\r\n * @param {Object} arguments - List of objects that need to be extended.\r\n * @returns {Object} - Extended object\r\n */\r\nexport default function extend() {\r\n    \r\n    var extended = {},\r\n          deep = false,\r\n          i = 0,\r\n          length = arguments.length;\r\n    \r\n    if ( Object.prototype.toString.call( arguments[0] ) === '[object Boolean]' ) {\r\n    \r\n        deep = arguments[0];\r\n        i++;\r\n    \r\n    }\r\n    \r\n    var merge = function (obj) {\r\n        \r\n        for ( var prop in obj ) {\r\n            \r\n            if ( Object.prototype.hasOwnProperty.call( obj, prop ) ) {\r\n                \r\n                if ( deep && Object.prototype.toString.call(obj[prop]) === '[object Object]' ) {\r\n                    \r\n                    extended[prop] = extend( true, extended[prop], obj[prop] );\r\n                \r\n                } else {\r\n                    \r\n                    extended[prop] = obj[prop];\r\n                \r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    };\r\n    \r\n    for ( ; i < length; i++ ) merge( arguments[i] );\r\n    \r\n    return extended;\r\n    \r\n}",
    "import isArray from './is-array';\r\n\r\n/**\r\n * @function\r\n * Recursively flattens a n-dimensional array.\r\n * @param {Array} arrays - Nested array to flatten\r\n * @returns {Array} - Flattened array\r\n */\r\nexport default function flatten( arrays ) {\r\n    \r\n    if ( !isArray( arrays ) ) {\r\n    \r\n        return arrays;\r\n        \r\n    }\r\n    \r\n    return arrays.reduce( ( flat, toFlatten ) => {\r\n        \r\n        return flat.concat( isArray( toFlatten ) ? flatten( toFlatten ) : toFlatten );\r\n        \r\n    }, [] );\r\n    \r\n}",
    "/**\r\n * @function\r\n * Determines whether the supplied element is visible in the view.\r\n * @param el - The element to check.\r\n * @returns {Boolean} - Whether the element is in the view.\r\n */\r\nexport default function inView( el ) {\r\n    \r\n    let rect = el.getBoundingClientRect();\r\n    let doc = document.documentElement;\r\n    \r\n    return (\r\n        rect.top >= 0 &&\r\n        rect.left >= 0 &&\r\n        rect.bottom <= (window.innerHeight || doc.clientHeight) &&\r\n        rect.right <= (window.innerWidth || doc.clientWidth)\r\n    );\r\n    \r\n}",
    "/**\r\n * @function\r\n * Determines whether the supplied element is an array.\r\n * @param el - The element to check.\r\n * @returns {Boolean} - Whether the element is an array\r\n */\r\nexport default function isArray( el ) {\r\n    \r\n    return Object.prototype.toString.call( el ) === '[object Array]';\r\n    \r\n}",
    "/**\r\n * @function\r\n * Determines whether the supplied element is an array.\r\n * @param el - The element to check.\r\n * @returns {Boolean} - Whether the element is an array\r\n */\r\nexport default function isFunction( el ) {\r\n    \r\n    return !!( el && el.constructor && el.call && el.apply );\r\n    \r\n}",
    "/**\r\n * @function\r\n * Determines whether the supplied element is an image.\r\n * @param el - The element to check.\r\n * @returns {Boolean} - Whether the element is an image\r\n */\r\nexport default function isImage( el ) {\r\n    \r\n    return el.nodeName.toLowerCase() === 'img';\r\n    \r\n}",
    "/**\r\n * @function\r\n * Determines whether the supplied element is a node list.\r\n * See http://stackoverflow.com/questions/7238177/how-to-detect-htmlcollection-nodelist-in-javascript for a detailed description.\r\n * @param nodes - The nodes to check.\r\n * @returns {Boolean} - Whether the element is a node list\r\n */\r\nexport default function isNodeList( nodes ) {\r\n    \r\n    var stringRepr = Object.prototype.toString.call(nodes);\r\n\r\n    return typeof nodes === 'object' &&\r\n        /^\\[object (HTMLCollection|NodeList|Object)\\]$/.test(stringRepr) &&\r\n        (typeof nodes.length === 'number') &&\r\n        (nodes.length === 0 || (typeof nodes[0] === \"object\" && nodes[0].nodeType > 0));\r\n    \r\n}\r\n",
    "/**\r\n * @function\r\n * Add class(es) to an element.\r\n * Note: Could probably use rest params for this...\r\n * @param el - The element to add the class(es) to.\r\n * @param arguments - List of classes to add to the element.\r\n */\r\nexport function addClass( el /* , classes to add */ ) {\r\n    \r\n    let toAdd = Array.prototype.slice.call( arguments, 1 );\r\n    let classes = el.className.split( ' ' );\r\n    \r\n    if ( toAdd.length === 0 ) {\r\n        throw new Error( \"You need to provide at least one class\" );\r\n    } \r\n    \r\n    el.className = classes\r\n        .concat( toAdd )\r\n        .join( ' ' )\r\n        .trim();\r\n    \r\n}\r\n\r\n/**\r\n * @function\r\n * Remove class(es) from an element.\r\n * Note: Could probably use rest params for this...\r\n * @param el - The element to remove the class(es) from.\r\n * @param arguments - List of classes to remove from the element.\r\n */\r\nexport function removeClass( el /*, classes to remove */ ) {\r\n    \r\n    let toRemove = Array.prototype.slice.call( arguments, 1 );\r\n    \r\n    if ( toRemove.length === 0 ) {\r\n        throw new Error( \"You need to provide at least one class\" );\r\n    } \r\n    \r\n    el.className = el.className\r\n        .split( ' ' )\r\n        .filter( (className) => toRemove.indexOf( className ) === -1 )\r\n        .join( ' ' )\r\n        .trim();\r\n    \r\n}\r\n\r\n/**\r\n * @function\r\n * Get the background image of the element\r\n * @param el - The element to get the background image from.\r\n * @param style - The property of the element to retrieve.\r\n */\r\nexport function getBackgroundImage( el ) {\r\n    \r\n    let background = window.getComputedStyle( el, null ).getPropertyValue( 'background' );\r\n    let urlIndex = ( background.indexOf( 'url(' ) + 4 );\r\n    let endIndex = background.slice( urlIndex ).indexOf( ')' );\r\n    \r\n    return background\r\n      .slice( urlIndex )\r\n      .slice( 0, endIndex )\r\n      .replace( /[\"|']/g, \"\" );\r\n    \r\n}\r\n\r\n/**\r\n * @function\r\n * Set the background image of the element\r\n * @param el - The element to get the background image from.\r\n * @param style - The property of the element to retrieve.\r\n */\r\nexport function setBackgroundImage( el, src ) {\r\n    \r\n    el.style.backgroundImage = `url(${ src })`; \r\n    \r\n}"
  ]
}